function [result] = ROI( background, objectimage )
    DIF = imabsdiff(objectimage, background);
    DIF =  max(DIF,[],3);
    Edges = im2bw(DIF, 0.15);
    result = imfill(Edges, 'holes');
end

function [ histogram ] = HOG( I, Mask )

    if size(I, 3) == 3
        I = rgb2gray(I);
    end
    [Gmag,Gdir] = imgradient(I);
    Gdir = mod(Gdir + 180, 180);
    
    GdirOffset = Gdir * (36/double(180.0));
    GdirOffset = floor(GdirOffset);
    histogramoffset = zeros(1,36);
    [m,n] = size(GdirOffset);
    for i = 1 : m
        for j = 1 : n
            histogramoffset(GdirOffset(i, j)+1) = histogramoffset(GdirOffset(i, j)+1) + double(Gmag(i, j)); 
        end
    end
    
    [maxV, offsetIDX] = max(histogramoffset);
    offset = offsetIDX*(180.0 / 36);
    Gdir = Gdir - offset;
    Gdir = mod(Gdir + 180, 180);
    Gdir = Gdir * (8/double(180.0));
    Gdir = floor(Gdir);
    Gmag = uint8(Gmag) .* uint8(Mask);
    
    histogram = zeros(1,8);
    [m,n] = size(Gdir);
    for i = 1 : m
        for j = 1 : n
            histogram(Gdir(i, j)+1) = histogram(Gdir(i, j)+1) + double(Gmag(i, j)); 
        end
    end
    histogram = histogram/sum(sum(histogram));
end

function [ histogram ] = HOG( I, Mask )

    if size(I, 3) == 3
        I = rgb2gray(I);
    end
    [Gmag,Gdir] = imgradient(I);
    Gdir = mod(Gdir + 180, 180);
    Gdir = Gdir * (8/double(180.0));
    Gdir = floor(Gdir);
    Gmag = uint8(Gmag) .* uint8(Mask);
    histogram = zeros(1,8);
    [m,n] = size(Gdir);
    for i = 1 : m
        for j = 1 : n
            histogram(Gdir(i, j)+1) = histogram(Gdir(i, j)+1) + double(Gmag(i, j)); 
        end
    end
    histogram = histogram/sum(sum(histogram));
end


function [ Labels, HOGs ] = HOGS( )
    [Filenames,Pathname] = uigetfile('*.jpg', 'multiselect','on');
    [m,n] = size(Filenames);
    I = cell(1, n);
    Labels = cell(n, 1);
    for i = 1:n
        CurrentFile = fullfile(Pathname, cellstr(Filenames(i)));
        S = char(Filenames(i));
        Labels{i} = S(1:end-6);
        a = imread(char(CurrentFile));
        I{i}  = a;
    end
    [Filename,Pathname] = uigetfile('*.jpg', 'fondo');
    fondo = imread(fullfile(Pathname, Filename));
    ROIs = cell(n, 1);
    HOGs = zeros(n, 8, 'double');
    for i = 1:n
        ROIs{i} = ROI(I{i}, fondo);
        HOGs(i,:) = HOG(rgb2gray(I{i}), ROIs{i});
    end
end

function [ Labels, Des ] = descriptor( )
    [Filenames,Pathname] = uigetfile('*.jpg', 'multiselect','on');
    [m,n] = size(Filenames);
    I = cell(1, n);
    Labels = cell(n, 1);
    for i = 1:n
        CurrentFile = fullfile(Pathname, cellstr(Filenames(i)));
        S = char(Filenames(i));
        Labels{i} = S(1:end-6);
        a = imread(char(CurrentFile));
        I{i}  = a;
    end
    [Filename,Pathname] = uigetfile('*.jpg', 'fondo');
    fondo = imread(fullfile(Pathname, Filename));
    ROIs = cell(n, 1);
    HOGs = zeros(n, 8, 'double');
    RGBs = zeros(n, 8, 'double');
    for i = 1:n
        ROIs{i} = ROI(I{i}, fondo);
        HOGs(i,:) = HOG(rgb2gray(I{i}), ROIs{i});
        RGBs(i,:) = RGB(I{i}, ROIs{i});
    end
    Des = cat(2, HOGs, RGBs);
end

function [  ] = SaveHogAndLabels( Labels, Labels_filename, HOG, HOG_filename )
    strings = char(Labels);
    dlmwrite(Labels_filename, strings, 'delimiter', '');
    dlmwrite(HOG_filename, HOG);
end


function [ Labels, HOG ] = LoadHogAndLabels( HOG_File, Labels_File )

    HOG = importdata(HOG_File);
    Labels = importdata(Labels_File);

end

function [ ] = createTrainingSet(Labels_filename, HOG_filename)
    [Labels, HOG] = HOGS();
    SaveHogAndLabels(Labels, Labels_filename, HOG, HOG_filename);
end



function [ result, error ] = clasificar( imagen, fondo )
    [labelName,labelPath] = uigetfile('*.vclabel', 'Selecciona los labels');
    labelFile = fullfile(labelPath, labelName);
    [hogName,hogPath] = uigetfile('*.vchog', 'Selecciona los HOGs');
    hogFile = fullfile(hogPath, hogName);
    
    
    [HOGs, Labels] = LoadHogAndLabels( hogFile, labelFile );
    
    mask = ROI(fondo, imagen);
    hog = HOG(imagen, mask);
    
    [result, error] = classify(hog, HOGs, Labels, 'diagquadratic');
end
